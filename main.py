import asyncio
import aiohttp
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, CRYPTO_PAY_TOKEN, PASSWORDS

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

PAY_API = "https://pay.crypt.bot/api"

FAMILIES = {
    "üö™ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–≤–µ—Ä—å": {
        "price": 2.5,
        "payload": "modern_door"
    },
    "üß± –ë–µ—Ç–æ–Ω–Ω–∞—è —Å—Ç–µ–Ω–∞": {
        "price": 3.0,
        "payload": "concrete_wall"
    }
}


async def create_invoice(asset: str, amount: float, payload: str, description: str):
    headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
    data = {
        "asset": asset,
        "amount": amount,
        "currency": "USDT",
        "description": description,
        "payload": payload
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{PAY_API}/createInvoice", headers=headers, json=data) as resp:
            result = await resp.json()
            return result["result"]["invoice_id"], result["result"]["pay_url"]


async def check_payment(invoice_id: str) -> bool:
    headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{PAY_API}/getInvoices?invoice_ids={invoice_id}", headers=headers) as resp:
            result = await resp.json()
            invoice = result["result"]["items"][0]
            return invoice["status"] == "paid"


@dp.message(F.text == "/start")
async def start(message: types.Message):
    buttons = [[types.KeyboardButton(text=name)] for name in FAMILIES]
    kb = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–µ–º–µ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–∞—Ä–æ–ª—å –∫ –∞—Ä—Ö–∏–≤—É:", reply_markup=kb)


@dp.message(F.text.in_(FAMILIES))
async def buy(message: types.Message):
    item = FAMILIES[message.text]
    payload = item["payload"]

    invoice_id, pay_url = await create_invoice(
        asset="USDT",
        amount=item["price"],
        payload=payload,
        description=f"–ü–æ–∫—É–ø–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è {message.text}"
    )

    await message.answer(f"üîê –û–ø–ª–∞—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∫ –∞—Ä—Ö–∏–≤—É:\n{pay_url}")
    await message.answer("‚è≥ –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...")

    for _ in range(12):
        await asyncio.sleep(5)
        if await check_payment(invoice_id):
            password = PASSWORDS.get(payload, "–ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ü–∞—Ä–æ–ª—å –∫ –∞—Ä—Ö–∏–≤—É: `{password}`", parse_mode="Markdown")
            return

    await message.answer("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start")



async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
